Before Go(con)...
share to learn @vnitc
12 Dec 2015
Tags: techtalk, vnitc, go, 2015

Duong Nguyen
ntduongxyz@gmail.com

* Disclaimer

- Personal opinions represent my *own* and not those of my employer. 
- I'm learning and might be *wrong*, feel free to *correct* me
- *Constructive* discussion and feedback are highly welcome!

* Warmp-up: A language game

- Name a language whose name starts with an English alphabet
- Today: *G* for *Go*

* What is Go (non-technical)?

- An *opinionated* [[https://go.googlesource.com/go][open source]] programming language originally developed by a team at Google in 2007
- Current status: Go 1.5, _fairly_mature_yet_actively_improved_
- Check out [[https://golang.org][one of the most useful link]]
- [[https://github.com/golang/go/wiki/GoUsers][Companies]] using Go in *production*: Dropbox, Heroku, Canonical, Soundcloud, Docker, Google, Facebook, Github, etc.

* Simple [un]installation

- See this complete [[https://golang.org/doc/install][guide]] for all supported platforms 
- For Linux, simply download and extract the archive into `/usr/local`, and
      export PATH=$PATH:/usr/local/go/bin
- To uninstall remove the `go` directory :D

* How Go was born?

- For a comprehensive background, see [[https://talks.golang.org/2012/splash.article][this article]] by Rob Pike
- Anecdote: Go was conceived during 45-min waiting for a large Google build in 2007
- [[https://xkcd.com/303/][Compiling...]]
 
* And for what?

- Large-scale software development: large dependencies, lots of teams/programmers
- The modern development world (multicore machines, distributed systems, web application development, cloud):
  built-in concurrency more than just primitive mutex, lock, etc.
- The life of programmers (e.g., happiness, productivity), not exotic fancy features (go for Haskell, LISP):
  fast build, clean dependencies, gc, static type checking, etc.
- *Do*less,*enable*more*

* Typical Go usage

- writing servers (web/backend servers, etc.)
- cmd tools
- automated tools
- hardware programming (e.g., gobot.io)
- teaching about system/concurrent programming
- writing article, blogs (e.g., Hugo), presentation (`present`)

* Promising but need to improve

- [[https://github.com/golang/mobile][Mobile development]]
- [[https://github.com/gonum][Scientific computing]]: something like Python's numpy ecosystem (numpy/scipy/matplotlib/sklearn, etc.)
- Running in a browser: check out [[https://github.com/gopherjs/][gopherjs]] (a compiler from Go to JS)

* Getting started

- For impatients, take the [[https://tour.golang.org/welcome/1][Go tour]]
- Make sure to read [[https://golang.org/doc/code.html][this]] before going for something more serious
- Play more at [[http://play.golang.org/][Go playground]]

* Hello world

.play foo.go

* What is Go (from technical perspective)?

- compiled
- statically typed
- concurrency built-in
- garbage-collected
- curly brace C-family (not too radical to pick up), but integrate various established ideas from different languages
- and more...

* Go != C

- no pointer arithmetic, just no array/pointer duality
- no implicit numeric conversions
- array bound checked by default
- no type aliases
- ++, -- are statements not expressions
- assignment is not an expression
- perfect to take address of a stack/local variable
- and more...

* Personal takeaways (incomplete)

- Simplicity
- Readability
- Not-so-steep learning curve (with caveat)
- Helpful docs/tools/community

* Simplicity (for minimalists)

- Canonical style, automatically enforced by `go fmt`
- only minimal key features vs. lots of features (other languages):

  - orthogonal feature sets enough to "cover the space"
  - remove complicated/bug-prone ones: pointer arithmetic, inheritance, semicolon, explicit thread management
  - add much-needed features: better memory management with GC, static type checking, interface (OO by composition)

- high quality standard libraries with clear docs and not-too-difficult to read and understand source code

* Hidden Complexity
 
- But, [[https://talks.golang.org/2015/simplicity-is-complicated.slide][Simplicity is complicated]]
- Eg: Garbage collector in concurrent system
- Good thing: 
  - complexity is handled by the language designers, not programmers
  - as a programmer, we *care* and *love* easy-to-use language

* Readability

- Not too many ways to do the same thing (vs. Ruby, Perl, etc.)
- Reliable code: easier to understand, debug
- Tradeoff: fun to write  vs. less work to maintain

* My favorites

- No redundant variables, imports 

  - unused things cause compile error
  - fast compilation/execution

- [un]export by [lower|upper]case
- Composition over inheritance
- defer, panic and recover
- GC
- [[https://blog.golang.org/first-class-functions-in-go-and-new-go][first-class functions]]
- perfect to define methods for any types
- go tools
- interact with C/C++ without SWIG
- and more...

* Useful go tools

- gofmt
- go build/install/run/test/benchmark
- goimports
- go vet
- go race
- golint
- godoc
- pprof: profiling tool
- godef, gorename, oracle: refactoring and static analysis tools

* Case study (if time allows?)

- How to structure a project in Go
- How Go solves dependency problem?
- Function calls, heap, stack and memory management with GC
  
  Why it is ok to take the address of stack variables in Go?
  Inlining to reduce function call overhead, etc.

- OOP in Go
- Concurrency is not Parallesism

* Useful resources:

- Go language spec/docs at https://golang.org
  
  Effective Go at https://golang.org
  
- Blog posts, articles, e.g., [[https://github.com/golang/go/wiki/Articles][golang wiki]]
- Books, e.g., [[http://www.gopl.io/][The Go Programming Language]]

* So, what's next?

- *NO* to the language war
- *Have*fun*writing*real*Go*code*   
- Check out resources
- Grok [[https://github.com/golang][source code]] (hardcore) and [[https://godoc.org/][Godoc]] is your friend.
- Watch Go-related talks on e.g. Youtube
- Go to 合コン :D...

* Take-home messages

- Go is an opinionated language for real-world software engineering 

  - do less, enable more
  - simplicity is the best (but hard)
  - tailored to modern large-scale software development, with productivity in mind

- Love it or hate it, know your tools and no language war
- Share to learn

* Attention, please!

- Want better sharing/learning in VAJ dev-community
- *[Proposal]* Monthly lightning talks on whatever geeky topics:

  - freestyle talks on what you care, what you think cool, etc.
  - open[mind] to any background, techniques, languages, frameworks, etc.
  - practice presentation/language skills
  - get interactive feedback/discussion 
  - get to know people for (more|future) collaboration, friendship
